% _printf
% Jeff Harris & Cameron Crupper
% November 2021

# NAME
	_printf - formatted output conversion

# SYNOPSIS
	#include "main.h"

	int _printf(const char *format, ...)

# DESCRIPTION
	Writes the output under the control of a format string that specifies how
	subsequent arguments are converted for output. The format string is a
	charater string, beginning and ending in its initial shift state, if any.
	The format string is composed of zero or more directives: ordinary 
	characters (not %), which are copied unchanged to the output stream;
	and conversion specifications, each of which results in fetching zero or
	more subsequent arguments. Each conversion specification is
        introduced by the character %, and ends with a conversion specifier.

# CONVERSION SPECIFIERS
	The conversion specifier comes after the % and indicates the character

	c - int argument is converted to an unsigned char, and the resulting
	character is written

	s - the const char * argument is expected to be a pointer to an array
	of character type (pointer to a string).  Characters from the array are
        written up to (but not including) a terminating null byte ('\0')

	% - if % is passed to %, it will print out a single %

	d, i - The int argument is converted to signed decimal notation

# RETURN VALUE
	Upon successful return, these functions return the number of
	characters printed (excluding the null byte used to end output to strings).

# EXAMPLES
	To print "Hello, world":
		
		#include <stdio.h>
		int main() {
   			// printf() displays the string inside quotation
   			printf("Hello, World!");
   			return 0;
		}
